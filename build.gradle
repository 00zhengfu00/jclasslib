import com.install4j.gradle.Install4jTask
import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'install4j'
apply plugin: 'bintray'

version = 4.1
buildDir = file('build/gradle')
mainClassName = 'org.gjt.jclasslib.browser.BrowserApplication'
ext.mediaDir = file('media')

buildscript {
    repositories {
        flatDir {
            dirs 'lib-compile'
        }
        maven {
            url 'http://jcenter.bintray.com'
        }
    }
    dependencies {
        // Download after install4j 6
        classpath ':i4jgradle'

        // remove the next two entries after gradle-bintray-plugin is updated with pull request
        classpath ':gradle-bintray-plugin'
        classpath('org.codehaus.groovy.modules.http-builder:http-builder:0.6') {
            exclude(module: 'groovy')
        }

        //classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.3'
    }
}

repositories {
    flatDir {
        dirs 'lib-compile'
    }
    maven {
        url 'http://jcenter.bintray.com'
    }
}

dependencies {
    // Download after install4j 6
    compile ':i4jruntime'
    compile 'org.jetbrains:annotations:13.0'
    testCompile 'org.testng:testng:6.8.8'
}

install4j {
    if (project.hasProperty('install4jHomeDir')) {
        installDir = file(install4jHomeDir)
    }
}

clean << {
    project.delete mediaDir
}

compileJava {
    String java6Home = System.getenv()['JAVA_1_6_HOME']
    if (java6Home) {
        if (Os.isFamily(Os.FAMILY_MAC)) {
            options.bootClasspath = "${java6Home}/../Classes/classes.jar"
        } else {
            options.bootClasspath = "${java6Home}/jre/lib/rt.jar"
        }
    } else {
        println 'Warning: Set JAVA_1_6_HOME to a Java 6 JDK'
    }

    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'

}

jar {
    archiveName = 'jclasslib.jar'
    manifest {
        attributes(
            "Main-Class": mainClassName
        )
    }
}

javadoc {
    options {
        links 'http://docs.oracle.com/javase/8/docs/api/'
    }
}

task libraryJar(type: Jar) {
    archiveName = 'jclasslib-library.jar'
    from sourceSets.main.output
    include 'org/gjt/jclasslib/bytecode/**'
    include 'org/gjt/jclasslib/io/**'
    include 'org/gjt/jclasslib/structures/**'
}

test {
    useTestNG()
    testLogging.showStandardStreams = true
}

task dist {
    dependsOn 'jar', 'libraryJar', 'javadoc', 'copyDist'
}

task copyDist(type: Copy) {
    from configurations.compile
    into mkdir(file("$buildDir/externalLibs"))
}

task media(type: Install4jTask) {

    dependsOn 'clean', 'dist'

    projectFile = file('service/jclasslib.install4j')
    release = version

    doFirst {
        if (!project.hasProperty('install4jHomeDir')) {
            throw new RuntimeException('Specify install4jHomeDir in gradle.properties and set it to an install4j installation directory')
        }
    }
}

task listMedia << {
    println configurations.media.resolve()
}

bintray {
    if (project.hasProperty('bintrayUser')) {
        user = bintrayUser
        key = bintrayApiKey
        files = fileTree(dir: mediaDir)
        pkg {
            repo = 'generic'
            name = 'jclasslib'
            licenses = ['GPL-2.0']
        }
        dryRun = project.hasProperty('dryRun')
    }
}

bintrayUpload {
    doFirst {
        if (!project.hasProperty('bintrayUser')) {
            throw new RuntimeException('Specify bintrayUser and bintrayApiKey in gradle.properties')
        }
    }
}
