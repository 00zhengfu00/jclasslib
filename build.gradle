import com.install4j.gradle.Install4jTask
import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'install4j'
apply plugin: 'bintray'

version = 4.2
ext.mediaDir = file('media')
ext.distDir = mkdir('dist')
ext.libCompileDir = file('lib-compile')

buildDir = file('build/gradle')
ext.libsDir = mkdir("$buildDir/libs")
ext.externalLibsDir = mkdir("$buildDir/externalLibs")

buildscript {
    repositories {
        flatDir {
            dirs 'lib-compile'
        }
        maven {
            url 'http://jcenter.bintray.com'
        }
    }
    dependencies {
        // Download after install4j 6
        classpath ':i4jgradle'

        // remove the next two entries after gradle-bintray-plugin is updated with pull request
        classpath ':gradle-bintray-plugin'
        classpath('org.codehaus.groovy.modules.http-builder:http-builder:0.6') {
            exclude(module: 'groovy')
        }

        //classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.3'
    }
}

allprojects {

    buildDir = new File(rootProject.buildDir, path.substring(1).replaceAll(':', '/'))

    repositories {
        flatDir {
            dirs libCompileDir
        }
        maven {
            url 'http://jcenter.bintray.com'
        }
    }

    plugins.withType(JavaPlugin).whenPluginAdded {
        dependencies {
            testCompile 'org.testng:testng:6.8.8'
        }

        tasks.withType(JavaCompile).each {JavaCompile compileJava ->
            compileJava.with {
                String java6Home = System.getenv()['JAVA_1_6_HOME']
                if (java6Home) {
                    if (Os.isFamily(Os.FAMILY_MAC)) {
                        options.bootClasspath = "${java6Home}/../Classes/classes.jar"
                    } else {
                        options.bootClasspath = "${java6Home}/jre/lib/rt.jar"
                    }
                } else {
                    println 'Warning: Set JAVA_1_6_HOME to a Java 6 JDK'
                }

                sourceCompatibility = '1.6'
                targetCompatibility = '1.6'
            }
        }

        tasks.withType(Test).each {Test test ->
            test.with {
                useTestNG()
            }
        }
    }
}

install4j {
    if (project.hasProperty('install4jHomeDir')) {
        installDir = file(install4jHomeDir)
    }
}

task clean << {
    delete mediaDir
    delete libsDir
    delete externalLibsDir
}


task jar(type: Jar) {
    destinationDir = libsDir
    archiveName = 'jclasslib.jar'
    gradle.projectsEvaluated {
        from zipTree(project(':data').jar.archivePath)
        from zipTree(project(':browser').jar.archivePath)
        manifest = project(':browser').jar.manifest
    }
}

task test()

task dist(dependsOn: jar)

task media(type: Install4jTask) {

    dependsOn 'clean', 'dist'

    projectFile = file('service/jclasslib.install4j')
    release = version

    doFirst {
        if (!project.hasProperty('install4jHomeDir')) {
            throw new RuntimeException('Specify install4jHomeDir in gradle.properties and set it to an install4j installation directory')
        }
    }
}

gradle.projectsEvaluated {
    getTasksByName('clean', true).each {task ->
        if (task != clean) {
            clean.dependsOn(task)
        }
    }
    getTasksByName('dist', true).each {task ->
        if (task != dist) {
            dist.dependsOn(task)
        }
    }
    getTasksByName('jar', true).each {task ->
        if (task != jar) {
            jar.dependsOn(task)
        }
    }
    getTasksByName('test', true).each {task ->
        if (task != test) {
            test.dependsOn(task)
        }
    }
}

bintray {
    if (project.hasProperty('bintrayUser')) {
        user = bintrayUser
        key = bintrayApiKey
        files = fileTree(dir: mediaDir, include: "*${version.toString().replace('.', '_')}.*")
        pkg {
            repo = 'generic'
            name = 'jclasslib'
            licenses = ['GPL-2.0']
        }
        dryRun = project.hasProperty('dryRun')
    }
}

bintrayUpload {
    doFirst {
        if (!project.hasProperty('bintrayUser')) {
            throw new RuntimeException('Specify bintrayUser and bintrayApiKey in gradle.properties')
        }
    }
}
